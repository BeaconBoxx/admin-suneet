{"version":3,"sources":["webpack:///node_modules/@angular/material/fesm2015/slide-toggle.js"],"names":["MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_elementRef","_MatSlideToggleMixinBase","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","defaults","_animationMode","_onChange","_","_onTouched","_uniqueId","_required","_checked","name","id","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","parseInt","monitor","subscribe","focusOrigin","_inputElement","nativeElement","focus","Promise","resolve","then","stopMonitoring","event","stopPropagation","emit","_emitChangeEvent","value","fn","isDisabled","disabled","markForCheck","options","focusVia","detectChanges","decorators","type","args","selector","exportAs","host","template","providers","inputs","encapsulation","None","changeDetection","OnPush","styles","ctorParameters","String","undefined","propDecorators","_thumbEl","_thumbBarEl","required","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","MatSlideToggleRequiredValidator","_MatSlideToggleRequiredValidatorModule","exports","declarations","MatSlideToggleModule","imports"],"mappings":"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","file":"default~pages-device-device-module-ngfactory~pages-notification-notification-module-ngfactory~pages-~3d4dacc0-es5.js","sourcesContent":["import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false })\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._onChange = (_) => { };\n        this._onTouched = () => { };\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /** Whether the slide-toggle is required. */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Whether the slide-toggle element is checked or not. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => this._onTouched());\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the slide-toggle. */\n    focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /** Toggles the checked state of the slide-toggle. */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            },] }\n];\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator],\n            },] }\n];\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n//# sourceMappingURL=slide-toggle.js.map\n"]}