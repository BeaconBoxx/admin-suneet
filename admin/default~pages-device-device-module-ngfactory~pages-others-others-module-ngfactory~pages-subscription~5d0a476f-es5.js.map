{"version":3,"sources":["webpack:///node_modules/@angular/material/dialog/index.d.ts.MatDialogContainer.html","webpack:///node_modules/@angular/material/fesm2015/dialog.js"],"names":["MatDialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","dialogContainer","opacity","transform","throwMatDialogContentAlreadyAttachedError","Error","_MatDialogContainerBase","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_focusMonitor","_animationStateChanged","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","attachDomPortal","portal","_portalOutlet","hasAttached","ngDevMode","_ariaLabelledBy","_setupFocusTrap","_capturePreviouslyFocusedElement","_focusDialogContainer","attachComponentPortal","attachTemplatePortal","_containsFocus","focusContainer","_focusTrap","focusInitialElement","nativeElement","focus","focusInitialElementWhenReady","previousElement","activeElement","element","body","contains","focusVia","destroy","create","decorators","type","ctorParameters","undefined","args","propDecorators","MatDialogContainer","arguments","_state","toState","totalTime","_trapFocus","next","state","_restoreFocus","markForCheck","selector","template","encapsulation","None","changeDetection","Default","animations","host","styles","uniqueId","MatDialogRef","_overlayRef","_containerInstance","id","_afterOpened","_afterClosed","_beforeClosed","_id","pipe","event","subscribe","complete","clearTimeout","_closeFallbackTimeout","_finishDialogClose","detachments","_result","componentInstance","dispose","keydownEvents","keyCode","preventDefault","_closeDialogVia","backdropClick","_recaptureFocus","dialogResult","detachBackdrop","setTimeout","_startExitAnimation","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updatePosition","classes","addPanelClass","removePanelClass","getConfig","positionStrategy","ref","interactionType","result","close","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","_MatDialogBase","_overlay","_injector","_defaultOptions","_parentDialog","_overlayContainer","scrollStrategy","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_getAfterAllClosed","_scrollStrategy","parent","componentOrTemplateRef","config","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","afterClosed","_removeOpenDialog","afterOpened","_initializeWithAttachedContent","_closeDialogs","find","dialog","overlayConfig","_getOverlayConfig","dialogConfig","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","providers","useValue","containerPortal","componentFactoryResolver","containerRef","attach","instance","$implicit","_createInjector","contentRef","updateSize","get","value","change","index","indexOf","splice","forEach","previousValue","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","dialogs","MatDialog","location","defaultOptions","parentDialog","Object","assign","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","changes","proxiedChange","currentValue","screenX","screenY","exportAs","_matDialogClose","MatDialogTitle","_dialogRef","Promise","resolve","then","container","MatDialogContent","MatDialogActions","classList","MatDialogModule","imports","exports","declarations","entryComponents"],"mappings":"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","file":"default~pages-device-device-module-ngfactory~pages-others-others-module-ngfactory~pages-subscription~5d0a476f-es5.js","sourcesContent":["<ng-template cdkPortalOutlet></ng-template>\n","import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Directive, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, Type, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /** Whether the dialog should focus the first focusable element on open. */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\nclass _MatDialogContainerBase extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \n    /** The dialog configuration. */\n    _config, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._config = _config;\n        this._focusMonitor = _focusMonitor;\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    /** Initializes the dialog container with the attached content. */\n    _initializeWithAttachedContent() {\n        this._setupFocusTrap();\n        // Save the previously focused element. This element will be re-focused\n        // when the dialog closes.\n        this._capturePreviouslyFocusedElement();\n        // Move focus onto the dialog immediately in order to prevent the user\n        // from accidentally opening multiple dialogs at the same time.\n        this._focusDialogContainer();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Moves focus back into the dialog if it was moved out. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            const focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\n            if (focusContainer) {\n                this._elementRef.nativeElement.focus();\n            }\n        }\n    }\n    /** Moves the focus inside the focus trap. */\n    _trapFocus() {\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n        else if (!this._containsFocus()) {\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const previousElement = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && previousElement &&\n            typeof previousElement.focus === 'function') {\n            const activeElement = this._document.activeElement;\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    previousElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Sets up the focus trap. */\n    _setupFocusTrap() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n    /** Captures the element that was focused before the dialog was opened. */\n    _capturePreviouslyFocusedElement() {\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = this._document.activeElement;\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = this._document.activeElement;\n        return element === activeElement || element.contains(activeElement);\n    }\n}\n_MatDialogContainerBase.decorators = [\n    { type: Directive }\n];\n_MatDialogContainerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDialogConfig },\n    { type: FocusMonitor }\n];\n_MatDialogContainerBase.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nclass MatDialogContainer extends _MatDialogContainerBase {\n    constructor() {\n        super(...arguments);\n        /** State of the dialog animation. */\n        this._state = 'enter';\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._trapFocus();\n            this._animationStateChanged.next({ state: 'opened', totalTime });\n        }\n        else if (toState === 'exit') {\n            this._restoreFocus();\n            this._animationStateChanged.next({ state: 'closed', totalTime });\n        }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._animationStateChanged.next({ state: 'opening', totalTime });\n        }\n        else if (toState === 'exit' || toState === 'void') {\n            this._animationStateChanged.next({ state: 'closing', totalTime });\n        }\n    }\n    /** Starts the dialog exit animation. */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-dialog-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matDialogAnimations.dialogContainer],\n                host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)',\n                },\n                styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_overlayRef, _containerInstance, id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /** Whether the user is allowed to close the dialog. */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has finished closing. */\n        this._afterClosed = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closed'), take(1)).subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = null;\n            this._overlayRef.dispose();\n        });\n        _overlayRef.keydownEvents()\n            .pipe(filter(event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        }))\n            .subscribe(event => {\n            event.preventDefault();\n            _closeDialogVia(this, 'keyboard');\n        });\n        _overlayRef.backdropClick().subscribe(() => {\n            if (this.disableClose) {\n                this._containerInstance._recaptureFocus();\n            }\n            else {\n                _closeDialogVia(this, 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = 1 /* CLOSING */;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._afterClosed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._getPositionStrategy().width(width).height(height);\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._overlayRef.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = 2 /* CLOSED */;\n        this._overlayRef.dispose();\n    }\n    /** Fetches the position strategy object from the overlay ref. */\n    _getPositionStrategy() {\n        return this._overlayRef.getConfig().positionStrategy;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n    // For those, we keep the behavior as is and do not deal with the interaction type.\n    if (ref._containerInstance !== undefined) {\n        ref._containerInstance._closeInteractionType = interactionType;\n    }\n    return ref.close(result);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\nclass _MatDialogBase {\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._dialogRefConstructor = _dialogRefConstructor;\n        this._dialogContainerType = _dialogContainerType;\n        this._dialogDataToken = _dialogDataToken;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length ?\n            this._getAfterAllClosed() :\n            this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayRef = this._createOverlay(config);\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n        this.afterOpened.next(dialogRef);\n        // Notify the dialog container that the content has been attached.\n        dialogContainer._initializeWithAttachedContent();\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatDialogConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping dialog container.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        const dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, { $implicit: config.data, dialogRef }));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param dialogContainer Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The dialog container should be provided as the dialog container and the dialog's\n        // content are created out of the same `ViewContainerRef` and as such, are siblings\n        // for injector purposes. To allow the hierarchy that is expected, the dialog\n        // container is explicitly provided in the injector.\n        const providers = [\n            { provide: this._dialogContainerType, useValue: dialogContainer },\n            { provide: this._dialogDataToken, useValue: config.data },\n            { provide: this._dialogRefConstructor, useValue: dialogRef }\n        ];\n        if (config.direction &&\n            (!userInjector || !userInjector.get(Directionality, null))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() }\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n    _removeOpenDialog(dialogRef) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                this._getAfterAllClosed().next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /** Closes all of the dialogs in an array. */\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\n_MatDialogBase.decorators = [\n    { type: Directive }\n];\n_MatDialogBase.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: undefined },\n    { type: undefined },\n    { type: OverlayContainer },\n    { type: undefined },\n    { type: Type },\n    { type: Type },\n    { type: InjectionToken }\n];\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog extends _MatDialogBase {\n    constructor(overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, defaultOptions, scrollStrategy, parentDialog, overlayContainer) {\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA);\n    }\n}\nMatDialog.decorators = [\n    { type: Injectable }\n];\nMatDialog.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: OverlayContainer }\n];\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n}\nMatDialogClose.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-dialog-close], [matDialogClose]',\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': '_onButtonClick($event)',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.type]': 'type',\n                }\n            },] }\n];\nMatDialogClose.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogClose.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    type: [{ type: Input }],\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n};\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id',\n                },\n            },] }\n];\nMatDialogTitle.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogTitle.propDecorators = {\n    id: [{ type: Input }]\n};\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.decorators = [\n    { type: Directive, args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            },] }\n];\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.decorators = [\n    { type: Directive, args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            },] }\n];\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDialogModule {\n}\nMatDialogModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n//# sourceMappingURL=dialog.js.map\n"]}